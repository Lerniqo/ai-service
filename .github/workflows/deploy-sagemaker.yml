name: Deploy to AWS SageMaker

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      instance_type:
        description: 'SageMaker instance type'
        required: false
        default: 'ml.m5.large'

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: ai-service  # Matches Terraform ECR repository name
  SAGEMAKER_MODEL_NAME: webapp-dev-ai-service-model  # Terraform-managed model name
  SAGEMAKER_ENDPOINT_NAME: webapp-dev-ai-service-endpoint  # Terraform-managed endpoint name
  PYTHON_VERSION: '3.11'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          python -m pytest tests/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if not exists
        continue-on-error: true
        run: |
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} || \
          aws ecr create-repository \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --image-scanning-configuration scanOnPush=true \
            --encryption-configuration encryptionType=AES256

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ACCOUNT_ID: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ACCOUNT_ID=$(echo ${{ steps.login-ecr.outputs.registry }} | cut -d'.' -f1)
          IMAGE_NAME=${{ env.ECR_REPOSITORY }}
          IMAGE_TAG=${{ github.sha }}
          REGION=${{ env.AWS_REGION }}
          
          docker build -t $IMAGE_NAME:$IMAGE_TAG .
          docker tag $IMAGE_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:latest
          docker tag $IMAGE_NAME:$IMAGE_TAG $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG

      - name: Test Docker image locally
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ACCOUNT_ID=$(echo ${{ steps.login-ecr.outputs.registry }} | cut -d'.' -f1)
          IMAGE_NAME=${{ env.ECR_REPOSITORY }}
          REGION=${{ env.AWS_REGION }}
          
          docker run -d --name test-container -p 8080:8080 \
            $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:latest
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8080/ping || exit 1
          
          echo "✓ Health check passed"
          
          docker stop test-container
          docker rm test-container

      - name: Push image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          ACCOUNT_ID=$(echo ${{ steps.login-ecr.outputs.registry }} | cut -d'.' -f1)
          IMAGE_NAME=${{ env.ECR_REPOSITORY }}
          IMAGE_TAG=${{ github.sha }}
          REGION=${{ env.AWS_REGION }}
          
          docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:latest
          docker push $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG
          
          echo "IMAGE_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$IMAGE_NAME:latest" >> $GITHUB_ENV

      - name: Trigger SageMaker model update (Terraform-managed)
        run: |
          echo "✓ Docker image pushed to ECR successfully"
          echo "Image URI: ${{ env.IMAGE_URI }}"
          echo ""
          echo "⚠️  Note: SageMaker resources are managed by Terraform"
          echo "To update the SageMaker endpoint with the new image:"
          echo ""
          echo "1. The Terraform configuration will automatically use the ':latest' tag"
          echo "2. Run 'terraform apply' in the terraform-infra/environments/dev directory to update the model"
          echo "3. Terraform will recreate the model and update the endpoint with the new image"
          echo ""
          echo "Resources managed by Terraform:"
          echo "  - Model: ${{ env.SAGEMAKER_MODEL_NAME }}"
          echo "  - Endpoint: ${{ env.SAGEMAKER_ENDPOINT_NAME }}"
          echo "  - Region: ${{ env.AWS_REGION }}"
          
      - name: Verify SageMaker endpoint status
        run: |
          echo "Checking current SageMaker endpoint status..."
          aws sagemaker describe-endpoint \
            --endpoint-name ${{ env.SAGEMAKER_ENDPOINT_NAME }} \
            --query '{EndpointName:EndpointName,EndpointStatus:EndpointStatus,CreationTime:CreationTime,LastModifiedTime:LastModifiedTime}' \
            --output table || echo "⚠️  Endpoint not found or not accessible"

# Required GitHub Secrets:
# - AWS_ACCESS_KEY_ID: Your AWS access key ID
# - AWS_SECRET_ACCESS_KEY: Your AWS secret access key
#
# Note: SageMaker resources (model, endpoint config, endpoint) are managed by Terraform
# This workflow only builds and pushes the Docker image to ECR
# To update SageMaker with the new image, run 'terraform apply' in terraform-infra/environments/dev
#
# The SageMaker role ARN is fetched automatically from IAM role: SageMakerExecutionRole
#
# To create the SageMaker execution role:
# aws iam create-role --role-name SageMakerExecutionRole \
#   --assume-role-policy-document '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"sagemaker.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
# aws iam attach-role-policy --role-name SageMakerExecutionRole --policy-arn arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
# aws iam attach-role-policy --role-name SageMakerExecutionRole --policy-arn arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
