name: Deploy AI Service to SageMaker

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-north-1
  ECR_REPOSITORY: webapp-dev-ai-service
  PROJECT_NAME: webapp
  ENVIRONMENT: dev

jobs:
  deploy:
    name: Deploy to SageMaker
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing image to ECR..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Image pushed successfully"

    - name: Update SageMaker endpoint
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Get the current endpoint configuration name
        ENDPOINT_NAME="${PROJECT_NAME}-${ENVIRONMENT}-ai-service-endpoint"
        
        # Check if endpoint exists
        if aws sagemaker describe-endpoint --endpoint-name $ENDPOINT_NAME --region $AWS_REGION >/dev/null 2>&1; then
          echo "SageMaker endpoint exists. Updating with new image..."
          
          # Create new model with updated image
          MODEL_NAME="${PROJECT_NAME}-${ENVIRONMENT}-ai-service-model-$(date +%s)"
          
          # Get the execution role ARN from the existing model
          CURRENT_MODEL=$(aws sagemaker list-models --name-contains "${PROJECT_NAME}-${ENVIRONMENT}-ai-service-model" --region $AWS_REGION --query 'Models[0].ModelName' --output text)
          EXECUTION_ROLE_ARN=$(aws sagemaker describe-model --model-name $CURRENT_MODEL --region $AWS_REGION --query 'ExecutionRoleArn' --output text)
          
          # Create new model with updated image
          aws sagemaker create-model \
            --model-name $MODEL_NAME \
            --primary-container "Image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG,Environment={PYTHONUNBUFFERED=1,SAGEMAKER_PROGRAM=serve,SAGEMAKER_SUBMIT_DIRECTORY=/opt/ml/code}" \
            --execution-role-arn $EXECUTION_ROLE_ARN \
            --region $AWS_REGION
          
          # Create new endpoint configuration
          CONFIG_NAME="${PROJECT_NAME}-${ENVIRONMENT}-ai-service-config-$(date +%s)"
          aws sagemaker create-endpoint-configuration \
            --endpoint-config-name $CONFIG_NAME \
            --production-variants "VariantName=AllTraffic,ModelName=$MODEL_NAME,InitialInstanceCount=1,InstanceType=ml.m5.large,InitialVariantWeight=1.0" \
            --region $AWS_REGION
          
          # Update endpoint
          aws sagemaker update-endpoint \
            --endpoint-name $ENDPOINT_NAME \
            --endpoint-config-name $CONFIG_NAME \
            --region $AWS_REGION
          
          echo "SageMaker endpoint update initiated. This may take 5-10 minutes to complete."
          
          # Wait for endpoint to be in service (optional, may timeout in GitHub Actions)
          echo "Waiting for endpoint to be updated..."
          aws sagemaker wait endpoint-in-service --endpoint-name $ENDPOINT_NAME --region $AWS_REGION || echo "Timeout waiting for endpoint, but update is still in progress"
          
        else
          echo "SageMaker endpoint does not exist. Please run Terraform to create the initial infrastructure."
          exit 1
        fi

    - name: Verify deployment
      run: |
        ENDPOINT_NAME="${PROJECT_NAME}-${ENVIRONMENT}-ai-service-endpoint"
        
        # Get endpoint status
        STATUS=$(aws sagemaker describe-endpoint --endpoint-name $ENDPOINT_NAME --region $AWS_REGION --query 'EndpointStatus' --output text)
        echo "Endpoint Status: $STATUS"
        
        if [ "$STATUS" = "InService" ]; then
          echo "✅ Deployment successful! SageMaker endpoint is in service."
        else
          echo "⚠️ Endpoint status is $STATUS. Check AWS Console for details."
        fi

    - name: Cleanup old resources (optional)
      continue-on-error: true
      run: |
        echo "Cleaning up old model versions and configurations..."
        
        # Keep only the latest 5 models
        aws sagemaker list-models \
          --name-contains "${PROJECT_NAME}-${ENVIRONMENT}-ai-service-model" \
          --region $AWS_REGION \
          --query 'Models[5:].ModelName' \
          --output text | \
        xargs -r -n1 aws sagemaker delete-model --model-name --region $AWS_REGION || true
        
        # Keep only the latest 5 endpoint configurations
        aws sagemaker list-endpoint-configurations \
          --name-contains "${PROJECT_NAME}-${ENVIRONMENT}-ai-service-config" \
          --region $AWS_REGION \
          --query 'EndpointConfigurations[5:].EndpointConfigName' \
          --output text | \
        xargs -r -n1 aws sagemaker delete-endpoint-configuration --endpoint-config-name --region $AWS_REGION || true
        
        echo "Cleanup completed"